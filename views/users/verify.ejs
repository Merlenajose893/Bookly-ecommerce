<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Verify Account</title>
  <style>
    /* General styles */
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f9;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    .container {
      display: flex;
      flex-direction: row;
      max-width: 1000px;
      margin: 20px;
      background-color: white;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      overflow: hidden;
    }

    /* Form styles */
    .form-container {
      flex: 1;
      padding: 30px;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    h2 {
      font-size: 24px;
      margin-bottom: 20px;
      color: #333;
    }

    p {
      font-size: 16px;
      margin-bottom: 20px;
      color: #666;
    }

    .otp-input {
      padding: 12px;
      margin-bottom: 20px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 100%;
      box-sizing: border-box;
    }

    .verify-btn {
      padding: 12px;
      font-size: 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .verify-btn:hover {
      background-color: #45a049;
    }

    .resend-otp {
      margin-top: 20px;
      font-size: 14px;
      text-align: center;
    }

    .resend-otp a {
      color: #4CAF50;
      text-decoration: none;
    }

    .resend-otp a:hover {
      text-decoration: underline;
    }

    .timer {
      text-align: center;
      margin-top: 10px;
      font-size: 14px;
      color: #888;
    }

    .disabled {
      pointer-events: none;
      color: gray;
    }

    /* Image styles */
    .books-container {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
      background-color: #f9f9f9;
    }

    .books-container img {
      max-width: 100%;
      height: auto;
      border-radius: 8px;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <div class="container">
    <div class="form-container">
      <form id="verifyForm" action="/verify" method="post">
        <h2>Verify your Account</h2>
        <p>The One-Time Password is sent to the Account josemerlena@gmail.com, please Enter your OTP.</p>
        <input type="text" class="otp-input" placeholder="Enter OTP" name="otp" required />
        <button type="submit" class="verify-btn">Verify</button>
        <p class="resend-otp">
          <a href="/resendOtp" id="resendOtpLink">Resend OTP</a>
        </p>
        <p class="timer">Resend OTP in <span id="countdown">30</span> seconds</p>
      </form>
    </div>
    <div class="books-container">
      <img src="img/books.jpg" alt="Books Image" class="img-fluid">
    </div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('verifyForm');
        const resendOtpButton = document.getElementById('resendOtpLink');
        const countdownElement = document.getElementById('countdown');
        let countdownTimer;
        let timeLeft = 60;

        // Validate OTP format (6 digits)
        const isValidOtp = (otp) => /^\d{6}$/.test(otp);

        // Handle OTP form submission
        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            const otp = document.querySelector('input[name="otp"]').value;

            if (!isValidOtp(otp)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid OTP',
                    text: 'Please enter a valid 6-digit OTP.'
                });
                return;
            }

            try {
                const response = await fetch('/verify', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ otp }),
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message,
                    }).then(() => {
                        window.location.href = data.redirectUrl;
                    });
                } else if (data.error === 'OTP_EXPIRED') {
                    Swal.fire({
                        icon: 'error',
                        title: 'OTP Expired',
                        text: 'Your OTP has expired. Please request a new OTP.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid OTP',
                        text: 'Please try again.'
                    });
                }
            } catch (error) {
                console.error("Error:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again later.'
                });
            }
        });

        // Handle Resend OTP functionality
        resendOtpButton.addEventListener('click', async (event) => {
            event.preventDefault();

            if (resendOtpButton.disabled) return;

            try {
                const response = await fetch('/resendOtp', { method: 'GET' });
                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Resent',
                        text: 'A new OTP has been sent to your email.'
                    });
                    startCountdown(60);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Unable to resend OTP. Please try again.'
                    });
                }
            } catch (error) {
                console.error("Error:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again later.'
                });
            }
        });

        // Start countdown timer
        const startCountdown = (duration) => {
            timeLeft = duration;
            resendOtpButton.disabled = true;
            countdownElement.style.display = 'inline';
            countdownElement.textContent = `Resend available in ${timeLeft}s`;

            clearInterval(countdownTimer);
            countdownTimer = setInterval(() => {
                timeLeft--;
                countdownElement.textContent = `Resend available in ${timeLeft}s`;

                if (timeLeft <= 0) {
                    clearInterval(countdownTimer);
                    resendOtpButton.disabled = false;
                    countdownElement.style.display = 'none';
                }
            }, 1000);
        };

        // Start the initial countdown
        startCountdown(timeLeft);
    });
  </script>
</body>
</html>
