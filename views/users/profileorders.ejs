<%- include('../../views/partials/profileHeader.ejs') -%>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
<style>
  .img-thumbnail {
    max-width: 50px;
    max-height: 70px;
    object-fit: cover;
  }
  /* Add these custom styles to your CSS file */
/* Enhanced responsiveness and positioning styles */

/* Base styles */
.card {
  border: none;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
  transition: all 0.2s;
}

.btn-sm {
  padding: 0.35rem 0.65rem;
  border-radius: 4px;
  font-size: 0.85rem;
  transition: all 0.2s;
}

.badge {
  font-weight: 500;
  padding: 0.4em 0.6em;
}

/* Make sure text doesn't overflow on small screens */
.min-width-0 {
  min-width: 0;
}

.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%;
}

/* Order item container with max height and scrolling for many items */
.order-items-container {
  max-height: 250px;
  overflow-y: auto;
  padding-right: 5px;
}

/* Custom scrollbar for order items */
.order-items-container::-webkit-scrollbar {
  width: 5px;
}

.order-items-container::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 10px;
}

.order-items-container::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 10px;
}

/* Equal height cards */
.h-100 {
  height: 100%;
}

/* Responsive adjustments */
@media (max-width: 767.98px) {
  /* Smaller padding on mobile */
  .container-fluid {
    padding-left: 10px;
    padding-right: 10px;
  }
  
  /* Smaller font on mobile */
  .fs-6 {
    font-size: 1rem !important;
  }
  
  /* Stack buttons for better mobile layout */
  .d-flex.flex-wrap.gap-2 {
    gap: 0.5rem !important;
  }
  
  /* Make buttons take more space on mobile */
  .d-flex.flex-wrap.gap-2 form, 
  .d-flex.flex-wrap.gap-2 a, 
  .d-flex.flex-wrap.gap-2 button {
    min-width: 100px;
    text-align: center;
  }
  
  /* Better card spacing on mobile */
  .card-body {
    padding: 0.75rem;
  }
  
  /* Smaller gap between columns */
  .g-3 {
    --bs-gutter-y: 1rem;
  }
}

/* Medium screens */
@media (min-width: 768px) and (max-width: 991.98px) {
  /* Adjust button sizing for medium screens */
  .btn-sm {
    padding: 0.35rem 0.5rem;
    font-size: 0.8rem;
  }
}

/* Improve hover states */
.btn:hover {
  transform: translateY(-1px);
}

.list-group-item {
  transition: background-color 0.2s;
}

.list-group-item:hover {
  background-color: rgba(0, 0, 0, 0.01);
}

/* Card backgrounds */
.bg-light {
  background-color: #f8f9fa !important;
}

/* Add some depth to cards */
.card.border-0.bg-light {
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

/* Make modals look better on mobile */
@media (max-width: 575.98px) {
  .modal-dialog {
    margin: 0.5rem;
  }
}
/* Smooth transitions for interactive elements */
.btn, .badge {
  transition: all 0.2s ease;
}

/* Hover effect for order items */
.list-group-item {
  transition: background-color 0.2s;
}

.list-group-item:hover {
  background-color: rgba(0, 0, 0, 0.01);
}

/* Better spacing for mobile */
@media (max-width: 768px) {
  .d-flex.align-items-center.bg-light.p-3 {
    flex-direction: column;
    align-items: flex-start !important;
  }
  
  .d-flex.align-items-center.bg-light.p-3 > div {
    margin: 0 0 0.5rem 0 !important;
  }
  
  .d-flex.align-items-center.bg-light.p-3 > .badge {
    align-self: flex-start;
  }
  
  .d-flex.flex-wrap.gap-2 {
    justify-content: center !important;
  }
}

/* Nicer buttons */
.btn-sm {
  padding: 0.25rem 0.75rem;
  font-size: 0.85rem;
}

/* Add a bit of depth to cards */
.card {
  transition: box-shadow 0.3s;
  border: none;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

.card:hover {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
}
  </style>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.all.min.js"></script>
            <!-- Main Content -->
            <div class="col-12 col-md-9">
              <div class="col-12">
                <div class="container-fluid py-3 px-lg-4">
                  <div class="row justify-content-center">
                    <div class="col-12 col-xl-10">
                      <!-- Orders Card -->
                      <div class="card shadow-sm mb-4">
                        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center py-2 py-md-3">
                          <h5 class="mb-0 fs-6 fs-md-5">
                            <i class="fas fa-shopping-bag me-2"></i>Your Orders
                          </h5>
                          <span class="badge bg-white text-primary">
                            <%= order.length %> Order<%= order.length !== 1 ? 's' : '' %>
                          </span>
                        </div>
                        
                        <% if (order.length > 0 && order) { %>
                          <div class="list-group list-group-flush">
                            <% order.forEach((order) => { %>
                              <div class="list-group-item p-0">
                                <!-- Order Header - Responsive design -->
                                <div class="d-flex flex-column flex-sm-row align-items-start align-items-sm-center bg-light p-2 p-sm-3">
                                  <div class="mb-2 mb-sm-0">
                                    <span class="text-muted small">Order ID: </span>
                                    <span class="text-primary fw-bold"><%= order.orderId %></span>
                                  </div>
                                  <div class="me-auto ms-0 ms-sm-3 mb-2 mb-sm-0">
                                    <span class="text-muted small">
                                      <%= order.createdAt ? new Date(order.createdAt).toLocaleDateString() : "N/A" %>
                                    </span>
                                  </div>
                                  <span class="badge 
                                    <%= order.status === 'Delivered' ? 'bg-success' : 
                                        order.status === 'Processing' ? 'bg-warning text-dark' : 
                                        order.status === 'Shipped' ? 'bg-info text-dark' : 
                                        order.status === 'Payment Pending' ? 'bg-danger' : 'bg-secondary' %>">
                                    <%= order.status %>
                                  </span>
                                </div>
                                
                                <!-- Order Content -->
                                <div class="p-2 p-sm-3">
                                  <div class="row g-3">
                                    <!-- Order Details Column - More responsive -->
                                    <div class="col-12 col-md-5">
                                      <div class="card border-0 bg-light">
                                        <div class="card-body p-3">
                                          <h6 class="text-muted mb-3 border-bottom pb-2 d-flex align-items-center">
                                            <i class="fas fa-money-bill-wave me-2"></i>Payment Information
                                          </h6>
                                          <div class="d-flex justify-content-between mb-2">
                                            <span>Payment Method:</span>
                                            <span class="fw-medium"><%= order.paymentMethod %></span>
                                          </div>
                                          <div class="d-flex justify-content-between">
                                            <span>Total Amount:</span>
                                            <span class="text-success fw-bold">â‚¹<%= order.totalAmount.toFixed(2)%></span>
                                          </div>
                                          
                                          <h6 class="text-muted mb-3 mt-4 border-bottom pb-2 d-flex align-items-center">
                                            <i class="fas fa-map-marker-alt me-2"></i>Shipping Address
                                          </h6>
                                          <address class="mb-0 small">
                                            <% if (order.shippingAddress) { %>
                                              <strong><%= order.shippingAddress.name %></strong><br>
                                              <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %><br>
                                              <%= order.shippingAddress.pincode %><br>
                                              <i class="fas fa-phone-alt me-1"></i><%= order.shippingAddress.phone %>
                                            <% } else { %>
                                              No address found
                                            <% } %>
                                          </address>
                                        </div>
                                      </div>
                                    </div>
                                    
                                    <!-- Order Items Column -->
                                    <div class="col-12 col-md-7">
                                      <div class="card border-0 bg-light h-100">
                                        <div class="card-body p-3">
                                          <h6 class="text-muted mb-3 border-bottom pb-2 d-flex align-items-center">
                                            <i class="fas fa-book me-2"></i>Books in this Order
                                          </h6>
                                          <div class="mb-3 order-items-container">
                                            <% order.books.forEach(function(book) { %>
                                              <div class="d-flex align-items-center mb-2 pb-2 border-bottom">
                                                <img src="/uploads/<%= book.productId.images[0] %>" 
                                                    alt="Book Cover" 
                                                    class="rounded me-3" 
                                                    style="width: 35px; height: 50px; object-fit: cover;">
                                                <div class="flex-grow-1 min-width-0">
                                                  <div class="d-flex flex-column flex-sm-row justify-content-between">
                                                    <span class="fw-medium text-truncate me-2"><%= book.productId.title %></span>
                                                    <span class="ms-0 ms-sm-2 text-sm-end">â‚¹<%= (book.productId.salesPrice * book.quantity).toFixed(2) %></span>
                                                  </div>
                                                  <div class="small text-muted">Qty: <%= book.quantity %></div>
                                                </div>
                                              </div>
                                            <% }) %>
                                          </div>
                                          
                                          <!-- Action Buttons - Better spacing and alignment -->
                                          <div class="d-flex flex-wrap gap-2 mt-3 justify-content-center justify-content-sm-end">
                                            <% if (order.status === 'Payment Pending') { %>
                                              <!-- <form action="/profileorder/retry/<%= order._id %>" method="POST"> -->
                                                <button type="submit" class="btn btn-success btn-sm" onclick="handlePayment('<%= order.orderId %>')">
                                                  <i class="fas fa-credit-card me-1"></i>Pay Now
                                                </button>
                                              </form>
                                            <% } %>
                                            
                                            <% if (order.status === 'Pending' || order.status === 'Paid') { %>
                                              <form action="/profileorder/cancel/<%= order._id %>" method="POST">
                                                <button type="submit" class="btn btn-outline-danger btn-sm">
                                                  <i class="fas fa-times me-1"></i>Cancel
                                                </button>
                                              </form>
                                            <% } %>
                                            
                                            <form action="/profileorder/viewOrder/<%= order._id %>">
                                              <button type="submit" class="btn btn-primary btn-sm">
                                                <i class="fas fa-eye me-1"></i>View Details
                                              </button>
                                            </form>
                                            
                                            <% if (order.status === 'Delivered') { %>
                                              <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#returnModal<%= order._id %>">
                                                <i class="fas fa-undo me-1"></i>Return
                                              </button>
                                            <% } %>
                                            
                                            <% if (order.status === 'Delivered') { %>
                                              <a href="/profileorder/invoice/<%= order._id %>" class="btn btn-outline-primary btn-sm">
                                                <i class="fas fa-file-download me-1"></i>Invoice
                                              </a>
                                            <% } %>
                                            
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              
                              <!-- Return Modal -->
                              <% if (order.status === 'Delivered') { %>
                                <div class="modal fade" id="returnModal<%= order._id %>" tabindex="-1" aria-hidden="true">
                                  <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content">
                                      <div class="modal-header bg-light">
                                        <h5 class="modal-title">Return Order #<%= order.orderId %></h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                      </div>
                                      <form action="/profileorder/return/<%= order._id %>" method="POST">
                                        <div class="modal-body">
                                          <input type="hidden" name="orderId" value="<%= order.orderId %>" readonly>
                                          
                                          <div class="mb-3">
                                            <label for="product<%= order._id %>" class="form-label">Select Product</label>
                                            <select id="product<%= order._id %>" name="productId" class="form-select" required>
                                              <option value="" disabled selected>Select a product</option>
                                              <% order.books.forEach(item => { %>
                                                <option value="<%= item.productId._id.toString()%>">
                                                  <%= item.productId.title %> 
                                                </option>
                                              <% }) %>
                                            </select>
                                          </div>
                                          
                                          <div class="mb-3">
                                            <label for="reason<%= order._id %>" class="form-label">Reason for Return</label>
                                            <textarea id="reason<%= order._id %>" name="reason" class="form-control" rows="3" required placeholder="Briefly explain why you are returning this product"></textarea>
                                          </div>
                                        </div>
                                        <div class="modal-footer">
                                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                          <button type="submit" class="btn btn-danger">Submit Return Request</button>
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              <% } %>
                            <% }) %>
                          </div>
                        <% } else { %>
                          <div class="card-body text-center py-5">
                            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                            <p class="text-muted">You haven't placed any orders yet.</p>
                            <a href="/shop" class="btn btn-primary">Start Shopping</a>
                          </div>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              </div>
        </div>
        <nav>
          <!-- Pagination Controls -->
<% if (totalPages > 1) { %>
  <nav aria-label="Orders Pagination">
    <ul class="pagination justify-content-center mt-4">
      
      <!-- Previous Page -->
      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
      </li>

      <!-- Page Numbers -->
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>"><%= i %></a>
        </li>
      <% } %>

      <!-- Next Page -->
      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
      </li>

    </ul>
  </nav>
<% } %>

        </nav>

        <!-- Newsletter Section -->
        <div class="newsletter-section mt-4 p-4 rounded">
            <div class="row align-items-center">
                <div class="col-12 col-md-6 mb-3 mb-md-0">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-envelope me-2"></i>
                        <span class="fw-medium me-2">Sign in to Newsletter</span>
                        <span class="text-secondary">For updates and offers</span>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="input-group">
                        <input type="email" class="form-control" placeholder="Enter Your Email">
                        <button class="btn btn-dark" type="button">Subscribe</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="mt-5">
            <div class="row">
                <div class="col-12 col-md-6">
                    <h3 class="mb-3">Bookly</h3>
                    <p class="text-secondary mb-3">
                        Discover stories and knowledge in every book.<br>
                        From timeless classics to trending new releases, Bookly<br>
                        brings you the best selection.<br>
                        Your next great read is just a click away!
                    </p>
                    <p class="text-secondary mb-1">
                        <i class="fas fa-map-marker-alt me-2"></i>123 Street, New York, USA
                    </p>
                    <p class="text-secondary mb-1">
                        <i class="fas fa-envelope me-2"></i>info@example.com
                    </p>
                    <p class="text-secondary mb-1">
                        <i class="fas fa-phone me-2"></i>+012 345 67890
                    </p>
                </div>
                <div class="col-12 col-md-6">
                    <h5 class="mb-3">HELP</h5>
                    <ul class="list-unstyled">
                        <li class="mb-2"><a href="#" class="text-secondary text-decoration-none">Track Order</a></li>
                        <li class="mb-2"><a href="#" class="text-secondary text-decoration-none">Returns</a></li>
                        <li class="mb-2"><a href="#" class="text-secondary text-decoration-none">Shipping</a></li>
                        <li class="mb-2"><a href="#" class="text-secondary text-decoration-none">FAQs</a></li>
                    </ul>
                </div>
            </div>
            <div class="border-top pt-3 mt-3">
                <p class="text-secondary text-center mb-0">Â© 2024 Bookly. All Rights Reserved.</p>
            </div>
        </footer>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
      function cancelOrder(orderId) {
          Swal.fire({
              title: 'Are you sure?',
              text: "You won't be able to revert this!",
              icon: 'warning',
              html: `
                  <p>Please provide a reason for cancellation:</p>
                  <textarea id="cancellationReason" class="form-control" rows="3" placeholder="Enter reason..."></textarea>
              `,
              showCancelButton: true,
              confirmButtonText: 'Yes, cancel it!',
              cancelButtonText: 'No, keep it',
              preConfirm: () => {
                  const reason = document.getElementById('cancellationReason').value;
                  if (!reason) {
                      Swal.showValidationMessage('Please enter a reason for cancellation.');
                  }
                  return reason; // Return the reason to use in the form submission
              }
          }).then((result) => {
              if (result.isConfirmed) {
                  // If confirmed, submit the form to cancel the order
                  const form = document.createElement('form');
                  form.action = `/profileorder/cancel/${orderId}`;
                  form.method = 'POST';
  
                  // Add the cancellation reason as a hidden input
                  const reasonInput = document.createElement('input');
                  reasonInput.type = 'hidden';
                  reasonInput.name = 'cancellationReason';
                  reasonInput.value = result.value; // Get the reason from SweetAlert2
                  form.appendChild(reasonInput);
  
                  document.body.appendChild(form);
                  form.submit(); // Submit the form to cancel the order
              }
          });
      }
  </script>
  <script>
    document.querySelector("form").addEventListener("submit", function(event) {
      event.preventDefault(); // Stop submission temporarily for debugging
  
      const formData = new FormData(this);
      console.log("ðŸ”¹ Product ID Sent:", formData.get("productId"));
      console.log("ðŸ”¹ Quantity:", formData.get("quantity"));
      console.log("ðŸ”¹ Reason:", formData.get("reason"));
  
      // Submit after logging
      this.submit();
    });
  </script>
  <script>
    async function returnOrder(orderId, productId, reason) {
  try {
    const response = await fetch("/return-order", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        orderId,
        productId,
        reason,
      }),
    });

    if (!response.ok) {
      const errorMessage = await response.text();
      throw new Error(errorMessage);
    }

    // Redirect to profile order page after successful return
    window.location.href = "/profileorder";

  } catch (error) {
    console.error("Error returning order:", error);
    alert(error.message); // Show an alert with the error message
  }
}

// Example usage: Call this function when a return button is clicked
document.getElementById("returnButton").addEventListener("click", function () {
  const orderId = document.getElementById("orderId").value;
  const productId = document.getElementById("productId").value;
  const reason = document.getElementById("returnReason").value;

  if (!reason.trim()) {
    alert("Please provide a return reason.");
    return;
  }

  returnOrder(orderId, productId, reason);
});

  </script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
      async function handlePayment(orderId) {
        try {
            if (!orderId) {
                throw new Error("Order ID is missing.");
            }
    
            // Fetch order details from the server
            const response = await fetch("/getOrderDetails", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId }),
            });
    
            if (!response.ok) {
                throw new Error("Failed to fetch order details.");
            }
    
            const orderData = await response.json();
            if (!orderData.razorpayOrderId) {
                throw new Error("No Razorpay order found. Please contact support.");
            }
            
            console.log("Retrying payment with Razorpay Order ID:", orderData.razorpayOrderId);
    
            // Configure Razorpay options
            const options = {
                key: "rzp_test_pxX6lfY1EAcvNw", // Replace with your Razorpay Key ID
                amount: orderData.amount, // Ensure amount matches the stored order
                currency: "INR",
                name: "Bookly",
                description: "Order Payment",
                order_id: orderData.razorpayOrderId, // Use the stored order ID
                handler: async function (response) {
                    console.log("Payment successful!", response);
    
                    // Verify payment with the backend
                    const verifyResponse = await fetch("/verify-razorpay-payment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            orderId: orderId,  
                        }),
                    });
    
                    const verifyResult = await verifyResponse.json();
                    console.log(verifyResult,'sdfghjkl;');
                    
    
                    if (verifyResult.success) {
                        await Swal.fire({
                            icon: "success",
                            title: "Payment Successful!",
                            text: "Your payment has been processed successfully.",
                            confirmButtonColor: "#3085d6",
                            confirmButtonText: "OK",
                        });
                        window.location.reload();
                    } else {
                        await Swal.fire({
                            icon: "error",
                            title: "Payment Failed!",
                            text: "Payment verification failed. Please try again.",
                            confirmButtonColor: "#d33",
                            confirmButtonText: "Retry",
                        });
                    }
                },
                prefill: {
                    name: orderData.shippingAddress.name || "Customer Name",
                    email: orderData.shippingAddress.email || "customer@example.com",
                    contact: orderData.shippingAddress.phone || "9999999999",
                },
                theme: {
                    color: "#3399cc",
                },
            };
    
            const razorpay = new Razorpay(options);
            razorpay.open();
        } catch (error) {
            console.error("Payment error:", error);
            Swal.fire({
                icon: "error",
                title: "Payment Error",
                text: error.message || "Something went wrong. Please try again!",
                confirmButtonColor: "#d33",
                confirmButtonText: "OK",
            });
        }
    }
    </script>
    
  
  
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</body>
</html>