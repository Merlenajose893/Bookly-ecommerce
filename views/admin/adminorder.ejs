<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      /* Existing styles */
      :root {
        --dark-bg: #1e1e2d;
        --sidebar-bg: #1a1a27;
        --content-bg: #151521;
        --text-color: #92929f;
        --text-muted: #6d6d80;
        --border-color: #2b2b40;
      }

      body {
        background-color: var(--dark-bg);
        color: var(--text-color);
      }

      .sidebar {
        background-color: var(--sidebar-bg);
        height: 100vh;
        padding: 20px;
        border-right: 1px solid var(--border-color);
      }

      .sidebar h3 {
        color: #ffffff;
        padding-bottom: 20px;
        border-bottom: 1px solid var(--border-color);
      }

      .main-container {
        background-color: var(--content-bg);
        min-height: 100vh;
        padding: 20px;
      }

      .nav-link {
        color: var(--text-color) !important;
        padding: 10px 15px;
        margin-bottom: 5px;
        border-radius: 5px;
        transition: all 0.3s ease;
      }

      .nav-link:hover {
        background-color: var(--dark-bg);
        color: #ffffff !important;
      }

      .nav-link.active {
        background-color: var(--dark-bg);
        color: #ffffff !important;
      }

      .search-box {
        background-color: var(--dark-bg);
        border: 1px solid var(--border-color);
        color: var(--text-color);
      }

      .search-box:focus {
        background-color: var(--dark-bg);
        border-color: #0d6efd;
        color: var(--text-color);
        box-shadow: none;
      }

      .table {
        color: var(--text-color);
        border-color: var(--border-color);
      }

      .table th {
        border-bottom: 2px solid var(--border-color);
        color: #9a1d1d;
      }

      .table td {
        border-bottom: 1px solid var(--border-color);
      }

      .btn-ban {
        background-color: #f90;
        color: white;
        border: none;
      }

      .pagination {
        justify-content: center;
      }
      /* Pagination Container */
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    padding: 20px 0;
    margin: 0;
}

/* Page Items */
.page-item {
    list-style: none;
    margin: 0;
}

/* Page Links */
.page-link {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 40px;
    height: 40px;
    padding: 8px 16px;
    margin: 0 4px;
    font-size: 15px;
    font-weight: 500;
    color: #4a5568;
    background-color: #fff;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    transition: all 0.2s ease;
    text-decoration: none;
}

/* Hover State */
.page-link:hover:not(.disabled) {
    color: #4299e1;
    border-color: #4299e1;
    background-color: #ebf8ff;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(66, 153, 225, 0.1);
}

/* Active State */
.page-item.active .page-link {
    background-color: #4299e1;
    border-color: #4299e1;
    color: #fff;
    font-weight: 600;
}

/* Previous/Next Buttons */
.page-item:first-child .page-link,
.page-item:last-child .page-link {
    padding: 8px 20px;
    font-weight: 600;
}

/* Disabled State */
.page-item.disabled .page-link {
    color: #a0aec0;
    background-color: #f7fafc;
    border-color: #edf2f7;
    cursor: not-allowed;
    pointer-events: none;
}

/* Hover on Active */
.page-item.active .page-link:hover {
    background-color: #3182ce;
    border-color: #3182ce;
    transform: translateY(-1px);
}

/* Focus State */
.page-link:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.25);
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .pagination {
        gap: 4px;
    }

    .page-link {
        min-width: 36px;
        height: 36px;
        padding: 6px 12px;
        font-size: 14px;
    }

    .page-item:first-child .page-link,
    .page-item:last-child .page-link {
        padding: 6px 16px;
    }
}

/* For screens smaller than 480px */
@media (max-width: 480px) {
    .page-link {
        min-width: 32px;
        height: 32px;
        padding: 4px 8px;
        margin: 0 2px;
    }

    .page-item:first-child .page-link,
    .page-item:last-child .page-link {
        padding: 4px 12px;
    }
}
/* Form Container */
.status-form {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px;
    border-radius: 8px;
    background-color: #f8fafc;
}

/* Select Styling */
.status-select {
    appearance: none;
    padding: 8px 36px 8px 16px;
    font-size: 14px;
    font-weight: 500;
    color: #4a5568;
    background-color: white;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    cursor: pointer;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%234a5568' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 8px center;
    background-size: 16px;
    transition: all 0.2s ease;
}

.status-select:hover {
    border-color: #cbd5e0;
}

.status-select:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);
}

/* Status Options Styling */
.status-select option {
    padding: 8px;
    font-weight: 500;
}

/* Status-specific colors */
.status-select option[value="Shipped"] {
    color: #3182ce;
}

.status-select option[value="Pending"] {
    color: #d69e2e;
}

.status-select option[value="Delivered"] {
    color: #38a169;
}

.status-select option[value="Cancelled"] {
    color: #e53e3e;
}

/* Update Button */
.status-btn {
    padding: 8px 16px;
    font-size: 14px;
    font-weight: 500;
    color: #4a5568;
    background-color: white;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.status-btn:hover {
    background-color: #4299e1;
    border-color: #4299e1;
    color: white;
    transform: translateY(-1px);
}

.status-btn:active {
    transform: translateY(0);
}

/* Responsive Styles */
@media (max-width: 768px) {
    .status-form {
        flex-direction: column;
        align-items: stretch;
        gap: 8px;
    }
    
    .status-select,
    .status-btn {
        width: 100%;
    }
}
    </style>
  </head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <body>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-2 sidebar">
          <h3 class="mb-4">Bookly</h3>
          <nav class="nav flex-column">
            <a class="nav-link" href="/admin">Dashboard</a>
            <a class="nav-link active" href="/admin/usermanage">User Management</a>
            <a class="nav-link" href="/admin/books">Products Management</a>
            <a class="nav-link" href="/admin/genres">Category Management</a>
            <a class="nav-link" href="/admin/adminorders">Order Management</a>
            <a class="nav-link" href="/admin/coupon">Coupon Management</a>
            <a class="nav-link" href="/admin/offer">Offer Management</a>
          </nav>
        </div>
  
        <div class="col-md-10 main-container">
          <div class="app-header mb-4"></div>
  
          <div class="d-flex justify-content-between align-items-center mb-4">
            <form method="GET" action="/admin/adminorders">
              <input type="text" class="form-control search-box" name="search" id="search" placeholder="Search by Order ID, Book Title, or User Name" value="<%= searchQuery || '' %>">
              <button type="submit">Search</button>
            </form>
          </div>
  
          <div class="table-responsive">
            <table class="table">
              <thead>
                <tr>
                  <th>Order ID</th>
                  <th>User</th>
                  <th>Total Amount</th>
                  <th>Payment Method</th>
                  <th>Status</th>
                  <th>Order Date</th>
                  <th>View</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% orders.forEach(order => { %>
                <tr>
                  <td><%= order.orderId %></td>
                  <td><%= order.user.name %></td>
                  <td>â‚¹<%= order.totalAmount.toFixed(2) %></td>
                  <td><%= order.paymentMethod %></td>
                  <td>
                    <span  class="badge <%= order.status === 'Pending' ? 'bg-warning' : order.status === 'Processing' ? 'bg-info' : order.status === 'Shipped' ? 'bg-primary' : order.status === 'Delivered' ? 'bg-success' : order.status === 'Cancelled' ? 'bg-danger' : 'bg-secondary' %>" id="statusDisplay-<%=order._id%>">
                      <%= order.status %>
                    </span>
                  </td>
                  <td><%= order.createdAt.toLocaleString() %></td>
                  <td>
                    <a href="/admin/adminorders/viewOrder/<%= order._id %>" class="btn btn-outline-primary btn-sm">View Order</a>
                  </td>
                  <td>
                    <% if (order.status === 'Pending' || order.status === 'Processing' || order.status === 'Delivered' || order.status === 'Returning' || order.status === 'Payment Pending' || order.status === 'Paid') { %>
                      <form id="statusForm-<%= order._id %>" class="d-inline" onsubmit="event.preventDefault(); confirmStatusUpdate('<%= order._id %>');">
                        <input type="hidden" name="orderId" value="<%= order._id %>" />
                        <select id="status-<%= order._id %>" name="status">
                          <option value="Shipped">Shipped</option>
                          <option value="Pending">Pending</option>
                          <option value="Delivered">Delivered</option>
                          <option value="Cancelled">Cancelled</option>
                          <option value="Returned">Returned</option>
                          <option value="Return Approve">Return Approve</option>
                        </select>
                        <button type="submit" class="btn btn-outline-warning btn-sm">Update Status</button>
                      </form>
                      
                    <% } %>
                  </td>
                  
                  
                </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
  
          <nav aria-label="Page navigation example">
            <ul class="pagination">
              <% if (pagination.previous) { %>
              <li class="page-item">
                <a class="page-link" href="<%= pagination.previous %>">Previous</a>
              </li>
              <% } else { %>
              <li class="page-item disabled">
                <a class="page-link" href="#">Previous</a>
              </li>
              <% } %> 
              <% pagination.pages.forEach(page => { %>
              <li class="page-item <%= page.active ? 'active' : '' %>">
                <a class="page-link" href="<%= page.url %>"><%= page.number %></a>
              </li>
              <% }) %> 
              <% if (pagination.next) { %>
              <li class="page-item">
                <a class="page-link" href="<%= pagination.next %>">Next</a>
              </li>
              <% } else { %>
              <li class="page-item disabled">
                <a class="page-link" href="#">Next</a>
              </li>
              <% } %>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      function getBadgeClass(status) {
    switch (status) {
      case 'Pending':         return 'bg-warning';
      case 'Processing':      return 'bg-info';
      case 'Shipped':         return 'bg-primary';
      case 'Delivered':       return 'bg-success';
      case 'Cancelled':       return 'bg-danger';
      case 'Returned':
      case 'Return Approve':  return 'bg-secondary';
      default:                return 'bg-secondary';
    }
  }
      async function confirmStatusUpdate(orderId) {
        const result = await Swal.fire({
          title: 'Are you sure?',
          text: 'You are about to update the status of this order.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, update it!',
          cancelButtonText: 'Cancel'
        });
    
        if (result.isConfirmed) {
          const form = document.getElementById(`statusForm-${orderId}`);
          const statusElement = document.getElementById(`status-${orderId}`);
          const newStatus = statusElement.value;
    
          const formData = new URLSearchParams();
          formData.append('orderId', orderId);
          formData.append('status', newStatus);
    
          try {
            const response = await fetch(`/admin/adminorders/updateStatus/${orderId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              body: formData.toString()
            });
    
            const data = await response.json();
    
            if (data.success) {
              Swal.fire({
                title: 'Success!',
                text: data.message || 'Order status updated successfully!',
                icon: 'success',
                timer: 3000,
                showConfirmButton: false
              });
    
              const statusDisplay = document.getElementById(`statusDisplay-${orderId}`);
              if (statusDisplay) {
                statusDisplay.textContent = newStatus;
                statusDisplay.className= `badge ${getBadgeClass(newStatus)}`
              }
            } else {
              throw new Error(data.message || 'Something went wrong');
            }
          } catch (error) {
            Swal.fire({
              title: 'Error!',
              text: error.message,
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        }
      }
    </script>
    
    
  </body>
  
</html>
